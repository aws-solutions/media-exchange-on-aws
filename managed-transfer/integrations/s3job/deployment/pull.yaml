AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloudformation template for batch transfer utlity integration helper for subscribers pulling assets from mediaexchange.

Metadata:

  License:
    Description: |
        Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

        Licensed under the Apache License, Version 2.0 (the "License").
        You may not use this file except in compliance with the License.
        You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Deployment Configuration"
        Parameters:
          - Environment
          - DestinationBucketName


Parameters:
  Environment:
    Type: String
    Description: Deployment Environment Name
    Default: dev
  DestinationBucketName:
    Type: String
    Description: Destination S3 Bucket Name
  Checksum:
    Description: Whether a checksum should be calculated and delivered as metadata.
    Default: false
    Type: String
    AllowedValues: [true, false]
  ImageName:
    Type: String
    Description: Image Name
    Default: mediaexchange-managedtransfer/aws-cli

Conditions:
  DoCheckSum:
    Fn::Equals: [true, !Ref Checksum]

Resources:

  DriverFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to be invoked by s3 batch
      FunctionName:
        Fn::Sub: mxc-managedtransfer-${AWS::Region}-${Environment}-s3job-subscriber-driver
      CodeUri: driver/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128

      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXRayDaemonWriteAccess
        - Statement:
          - Sid: xray
            Effect: Allow
            Action:
            - lambda:GetAccountSettings
            Resource: '*'
        - Statement:
          - Sid: batch
            Effect: Allow
            Action:
              - batch:SubmitJob
              - batch:DescribeJobs
              - batch:TerminateJob
            Resource:
            - Fn::Sub: arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*
            - Fn::Sub: arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/*

        # for preflight check
        - S3ReadPolicy:
            BucketName: '*'
        - S3WritePolicy:
            BucketName:
              Ref: DestinationBucketName
        - Statement:
          - Sid: kms
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'

      Timeout: 300
      ReservedConcurrentExecutions: 256

      Environment:
        Variables:
          JobDefinition:
            Fn::If:
              - DoCheckSum
              - Ref: CopyAndCheckSumJobDefinition
              - Ref: CopyJobDefinition
          JobQueue:
            Fn::ImportValue:
              Fn::Sub: mxc-${AWS::Region}-${Environment}-managedtransfer-jobq
          DestinationBucketName:
            Ref: DestinationBucketName
          MinSizeForBatchinBytes:
            Fn::If:
              - DoCheckSum
              - 0
              - 524288000 #500MB

  CopyJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}
        Vcpus: 1
        Memory: 512
        Command:
          - aws
          - s3
          - cp
          - Ref::SourceS3Uri
          - Ref::DestinationS3Uri
          - --copy-props
          - metadata-directive
          - --acl
          - bucket-owner-full-control
          - --expected-size
          - Ref::Size
        JobRoleArn:
          Fn::GetAtt: JobRole.Arn
      RetryStrategy:
        Attempts: 3

  CopyAndCheckSumJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}
        Vcpus: 2
        Memory: 3584
        Command:
          - pullWithCheckSum.sh
          - Ref::SourceS3Uri
          - Ref::DestinationS3Uri
        JobRoleArn:
          Fn::GetAtt: JobRole.Arn
      RetryStrategy:
        Attempts: 3


  JobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        -
          PolicyName: KMSAndS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                # minimal permissions
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectVersionAcl
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                Resource:
                  Fn::Sub: arn:aws:s3:::${DestinationBucketName}/*

              -
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource: '*'

  S3BatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: mxc-managedtransfer-${AWS::Region}-${Environment}-s3job-subscriber-role
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: batchoperations.s3.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: S3BatchRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - lambda:InvokeFunction
                Effect: Allow
                Resource: '*'
