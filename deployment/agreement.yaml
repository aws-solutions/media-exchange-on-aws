# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: '2010-09-09'
Description: >
  (SO0133) - __SOLUTION_NAME__ __VERSION__ - setup publisher and subscriber shared resources for asset exchange.

Outputs:

  SubscriberOnboardingSummary:
    Description: Configuration information for subscriber.
    Value:
      Fn::Join:
        - ' '
        - - Fn::Sub: PUBLISHER_NAME=${PublisherName}
          - Fn::Sub: SUBSCRIBER_NAME=${SubscriberName}
          - Fn::Sub: AWS_REGION=${AWS::Region}
          - Fn::Sub: MEDIAEXCHANGE_BUCKET_NAME=${ExchangeBucket}
          - Fn::Sub: KMS_KEY_ARN=${CMK.Arn}
          - Fn::Join:
            - '='
            - - SNS_TOPIC_ARN
              - Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-notificationtopic
          - Fn::Sub: EVENT_BUS_ARN=arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
          - Fn::Join:
            - '='
            - - SUBSCRIBER_ROLE
              - Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-role

  ConsoleUrl:
    Description: Use this url to directly access the shared bucket.
    Value:
      Fn::Sub: https://s3.console.aws.amazon.com/s3/buckets/${ExchangeBucket}/?region=${AWS::Region}&tab=overview

  PublisherOnboardingSummary:
    Description: Configuration information for publisher.
    Value:
      Fn::Join:
        - ' '
        - - Fn::Sub: PUBLISHER_NAME=${PublisherName}
          - Fn::Sub: SUBSCRIBER_NAME=${SubscriberName}
          - Fn::Sub: AWS_REGION=${AWS::Region}
          - Fn::Sub: MEDIAEXCHANGE_BUCKET_NAME=${ExchangeBucket}
          - Fn::Sub: KMS_KEY_ARN=${CMK.Arn}
          - Fn::Join:
            - '='
            - - SNS_TOPIC_ARN
              - Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-notificationtopic
          - Fn::Sub: EVENT_BUS_ARN=arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
          - Fn::Join:
            - ''
            - - LOG_BUCKET_NAME=
              - Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-logs
          - Fn::Join:
            - '='
            - - PUBLISHER_ROLE
              - Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-role

Metadata:

  License:
    Description: |
        Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

        Licensed under the Apache License, Version 2.0 (the "License").
        You may not use this file except in compliance with the License.
        You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Deployment Configuration"
        Parameters:
          - Environment
      -
        Label:
          default: "Agreement Configuration"
        Parameters:
          - PublisherName
          - SubscriberName
          - ExpirationInDays
          - EmailNotifications


Parameters:
  Environment:
    Type: String
    Description: Deployment Environment Name
    Default: dev
    AllowedPattern: "[A-Za-z0-9]+"
    ConstraintDescription: Malformed input-Parameter MyParameter must only contain uppercase and lowercase letters and numbers
    MaxLength: 10
    MinLength: 2

  PublisherName:
    Type: String
    Description: The name of the publisher, case sensitive, as registered in this Media Exchange deployment.
    ConstraintDescription: Malformed input-Parameter PublisherName must only contain uppercase and lowercase letters and numbers
    AllowedPattern: "[A-Za-z0-9-]+"
    MaxLength: 64
    MinLength: 3

  SubscriberName:
    Type: String
    Description: The name of the subscriber, case sensitive, as registered in this Media Exchange deployment.
    AllowedPattern: "[A-Za-z0-9-]+"
    ConstraintDescription: Malformed input-Parameter SubscriberName must only contain uppercase and lowercase letters and numbers
    MaxLength: 64
    MinLength: 3

  ExpirationInDays:
    Type: Number
    Description: The assets get lifecycle deleted after these many days from the MediaExchange bucket.
    MinValue: 1
    MaxValue: 30
    Default: 5

  EmailNotifications:
    Type: String
    Description: Select yes to forward all notifications to subscriber's email. If "no" (default) the notifications are available via EventBridge and SNS.
    Default: "no"
    AllowedValues:
      - "yes"
      - "no"


Conditions:
  EnableEmailNotifications:
    Fn::Equals:
    - "yes"
    - Ref: EmailNotifications


Resources:

  ExchangeBucket:
    Type: AWS::S3::Bucket
    Properties:

      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

      VersioningConfiguration:
        Status: Enabled

      LoggingConfiguration:
        LogFilePrefix:
          Fn::Sub: logs/${SubscriberName}/
        DestinationBucketName:
          Fn::ImportValue:
            Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-logs

      #Expire objects after the lifecycle period
      LifecycleConfiguration:
        Rules:
          -
            Id: Expire
            Status: Enabled
            ExpirationInDays:
              Ref: ExpirationInDays

          -
            Id: AutoRemove
            Status: Enabled
            NoncurrentVersionExpirationInDays:
              Ref: ExpirationInDays

          -
            Id: CleanupIncompleteUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2

      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
                KMSMasterKeyID:
                  Fn::GetAtt: CMK.Arn
                SSEAlgorithm: 'aws:kms'

      Tags:
        -
          Key: Createdby
          Value: __SOLUTION_NAME__/__VERSION__

    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain


  #bucket policy
  ExchangeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ExchangeBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:

          # TLS only
          -
            Sid: "RequireTLSSigv4"
            Action:
              - "s3:*"
            Effect: "Deny"
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${ExchangeBucket}
              - Fn::Sub: arn:${AWS::Partition}:s3:::${ExchangeBucket}/*
            Principal: "*"
            Condition:
              Bool:
                aws:SecureTransport: false
              StringNotEquals:
                s3:signatureversion: AWS4-HMAC-SHA256
              StringNotEquals:
                s3:x-amz-content-sha256: UNSIGNED-PAYLOAD

          -
            Sid: "AllowCopyOpPublisher"
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::${ExchangeBucket}/*
            Principal:
              AWS:
                - Fn::ImportValue:
                    Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-role

            Condition:

              StringEqualsIfExists:
                s3:x-amz-storage-class: STANDARD
              StringEqualsIfExists:
                s3:x-amz-server-side-encryption: aws:kms
              StringEqualsIfExists:
                s3:x-amz-server-side-encryption-aws-kms-key-id:
                  Fn::GetAtt: CMK.Arn


          -
            Sid: "AllowPublisher"
            Effect: Allow
            Action:
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetObjectAcl
              - s3:GetObjectVersionAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersionTagging
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:DeleteObject
              - s3:DeleteObjectTagging
              - s3:DeleteObjectVersion
              - s3:DeleteObjectVersionTagging
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::${ExchangeBucket}/*
            Principal:
              AWS:
                - Fn::ImportValue:
                    Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-role


          #read permissions are granted by the ACLs.
          -
            Sid: "AllowCopyOpSubscriber"
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetObjectAcl
              - s3:GetObjectVersionAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersionTagging
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::${ExchangeBucket}/*
            Principal:
              AWS:
                - Fn::ImportValue:
                    Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-role

          -
            Sid: "AllowBasicConsole"
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::${ExchangeBucket}
            Principal:
              AWS:
                - Fn::ImportValue:
                    Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-role
                - Fn::ImportValue:
                    Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-role

  CMK:
    Type: AWS::KMS::Key
    Properties:
      Description: Symetric Key for Encrypting Objects in Media Exchange
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: node-key-policy
        Statement:
          -
            Sid: KeyManagement
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          -
            Sid: SubscriberAccess
            Effect: Allow
            Principal:
              AWS:
                Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-role

            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService' :
                  Fn::Sub: s3.${AWS::Region}.amazonaws.com

          -
            Sid: PublisherAccess
            Effect: Allow
            Principal:
              AWS:
                Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-role
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService' :
                  Fn::Sub: s3.${AWS::Region}.amazonaws.com

  S3NotifySubscriberRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Notify Content Published"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
          - Object Deleted
        detail:
          bucket:
            name:
              - Fn::Sub: ${ExchangeBucket}
      Targets:
        -
          Id: "SNSEvent"
          InputPath: $.detail
          Arn:
            Fn::ImportValue:
              Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-notificationtopic
          DeadLetterConfig:
            Arn:
              Fn::ImportValue:
                Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-notificationdlq


  NotificationsSubscription:
    Type: AWS::SNS::Subscription
    Condition: EnableEmailNotifications
    Properties:
      Endpoint:
        Fn::ImportValue:
          Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-email
      Protocol: email
      TopicArn:
        Fn::ImportValue:
          Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-notificationtopic


  S3NotifyPublisherRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Notify Content Published"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
          - Object Deleted
        detail:
          bucket:
            name:
              - Fn::Sub: ${ExchangeBucket}
      Targets:
        -
          Id: "SNSEvent"
          InputPath: $.detail
          Arn:
            Fn::ImportValue:
              Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-notificationtopic
          DeadLetterConfig:
            Arn:
              Fn::ImportValue:
                Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-notificationdlq


  NotifySubscriberRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Notify Publisher Messages"
      EventPattern:
        source:
          - mxc.publisher
        detail-type:
          - Fn::Sub: bucket=${ExchangeBucket}
      State: "ENABLED"
      Targets:
        -
          Id: "SNSEvent"
          InputPath: $.detail
          Arn:
            Fn::ImportValue:
              Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-notificationtopic
          DeadLetterConfig:
            Arn:
              Fn::ImportValue:
                Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-notificationdlq
