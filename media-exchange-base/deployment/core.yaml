AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Cloudformation template for media exchange common resources.

Metadata:

  License:
    Description: |
      Copyright 2020 Amazon.com Inc. or its affiliates. All Rights Reserved.

      Permission is hereby granted free of charge to any person obtaining a copy of this
      software and associated documentation files (the Software) to deal in the Software
      without restriction including without limitation the rights to use copy modify
      merge publish distribute sublicense and/or sell copies of the Software and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION
      OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  AWS::cloudformation::Interface:
    ParameterGroups:
      -
        Label:
          default: Deployment Configuration
        Parameters:
          - Environment
      -
        Label:
          default: "Notifications Configuration"
        Parameters:
          - Notifications

Parameters:
  Environment:
    Type: String
    Description: Deployment Environment Name
    Default: dev

  Notifications:
    Type: String
    Description: Select auto to forward default S3 notifications to subscribers.
    Default: auto
    AllowedValues:
      - auto
      - custom

Outputs:
  LogBucketName:
    Description: Logging Bucket Name
    Value:
      Ref: ExchangeLogBucket
    Export:
      Name:
        Fn::Sub: mxc-${AWS::Region}-${Environment}-logs

  S3EventForwarederFunctionArn:
    Description: S3 event forwarder function
    Value:
      Ref: S3ForwarderFunction
    Export:
      Name:
        Fn::Sub: mxc-${AWS::Region}-${Environment}-s3eventfn

Resources:

  #bucket for storing S3 Access Logs
  ExchangeLogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  #bucket for storing cloudtrails
  ExchangeCloudTrailBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ExchangeCloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ExchangeCloudTrailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource:
              Fn::Sub: arn:aws:s3:::${ExchangeCloudTrailBucket}
          -
            Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${ExchangeCloudTrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  ExchangeCloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  ExchangeCloudTrailLogGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: Cloudtrail role for cloudwatch logs.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: mxc-cw-ct
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource:
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ExchangeCloudTrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*
              -
                Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ExchangeCloudTrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*

  #cloudtrail for object read/write operations
  ObjectsTrail:
    DependsOn: ExchangeCloudTrailBucketPolicy
    Type: AWS::CloudTrail::Trail
    Properties:
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: false
      S3BucketName:
        Ref: ExchangeCloudTrailBucket
      CloudWatchLogsLogGroupArn:
        Fn::GetAtt: ExchangeCloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn:
        Fn::GetAtt: ExchangeCloudTrailLogGroupRole.Arn

  S3EventForwarderFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: Role for EventForwarer Lambda.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: mxc-lambda-putevents
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  Fn::Sub: arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default


  #lambda to send s3 events to EventBus
  S3ForwarderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to forward the S3 event notifications to EventBridge
      MemorySize: 128
      Role:
        Fn::GetAtt: S3EventForwarderFunctionRole.Arn
      Runtime: python3.7
      Timeout: 10
      Handler: index.handler
      Environment:
        Variables:
          NotificationConfiguration:
            Ref: Notifications
          SourceName:
            Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher

      Code:
        ZipFile: |
          import os
          import logging
          import boto3
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          #events client
          client = boto3.client('events')

          def handler(event, context):
            # logger.debug("Event received", json.dumps(event))

            try:
              logger.info("forwarding Event to EventBridge")

              bucket = event["Records"][0]["s3"]["bucket"]["name"]

              routing_data = 'source=s3:ObjectCreated:*,notify='+ os.environ['NotificationConfiguration'] +',bucket=' + bucket
              logger.info("routing_data=" + routing_data)

              response = client.put_events(
                Entries=[
                    {
                        'Source': os.environ['SourceName'],
                        'DetailType': routing_data,
                        'Detail': json.dumps(event),
                    },
                ]
              )

              logger.debug("finished forwarding event")

            except Exception as e:
                # Catch all exceptions
                result = 'Exception: {}'.format(e)
                logger.error(result)
