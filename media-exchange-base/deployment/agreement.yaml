AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Cloudformation template for media exchange publisher and subscriber shared resources for asset exchange.

Outputs:

  SubscriberOnboardingSummary:
    Description: Configuration information for subscriber.
    Value:
      Fn::Join:
        - ' '
        - - Fn::Sub: SUBSCRIBER_NAME=${SubscriberName}
          - Fn::Sub: PUBLISHER_NAME=${PublisherName}
          - Fn::Sub: AWS_REGION=${AWS::Region}
          - Fn::Sub: BUCKET_NAME=${ExchangeBucket}
          - Fn::Sub: MEDIAEXCHANGE_ACCOUNTID=${AWS::AccountId}

  ConsoleUrl:
    Description: Use this url to directly access the shared bucket.
    Value:
      Fn::Sub: https://s3.console.aws.amazon.com/s3/buckets/${ExchangeBucket}/?region=${AWS::Region}&tab=overview

  PublisherOnboardingSummary:
    Description: Configuration information for publisher.
    Value:
      Fn::Join:
        - ' '
        - - Fn::Sub: PUBLISHER_NAME=${PublisherName}
          - Fn::Sub: AWS_REGION=${AWS::Region}
          - Fn::Sub: MEDIAEXCHANGE_ACCOUNTID=${AWS::AccountId}
          - Fn::Sub: BUCKET_NAME=${ExchangeBucket}
          - Fn::Sub: SUBSCRIBER_NAME=${SubscriberName}
          - Fn::Sub: KMS_KEY_ID="${CMK.Arn}"
          - Fn::Sub: EVENT_SOURCE_NAME=mxc-${AWS::Region}-${Environment}-publisher
          - Fn::Join:
            - ''
            - - SUBSCRIBER_CANONICAL_ACCOUNT_ID=
              - Fn::ImportValue:
                  Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-canonicalaccountid



Metadata:

  License:
    Description: |
      Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Deployment Configuration"
        Parameters:
          - Environment
      -
        Label:
          default: "Agreement Configuration"
        Parameters:
          - PublisherName
          - SubscriberName


Parameters:
  Environment:
    Type: String
    Description: Deployment Environment Name
    Default: dev

  PublisherName:
    Type: String
    Description: The name of the publisher, case sensetive, as registerd in this Media Exchange deployment.

  SubscriberName:
    Type: String
    Description: The name of the subscriber, case sensetive, as registerd in this Media Exchange deployment.


Resources:


  ExchangeBucket:
    Type: AWS::S3::Bucket

    Properties:
      # BucketName:
      #   Fn::Sub: mxc-${AWS::AccountId}-${AWS::Region}-${Environment}-publisherbucket-${PublisherAccountId}

      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

      VersioningConfiguration:
        Status: Enabled

      LoggingConfiguration:
        LogFilePrefix:
          Ref: PublisherName
        DestinationBucketName:
          Fn::ImportValue:
            Fn::Sub: mxc-${AWS::Region}-${Environment}-logs

      # objects must be encrypted with a CMK
      # we do not specify a default encryption configuration
      # rather enforce it from the bucket policy that
      # a kms key must be used.

      # Objects must be locked for the duration of the agreement
      # we do not specify a default lock configuration. But we
      # expect the publishers the lock the objects for the duration
      # applicable for the agreement
      # we also stop explicit deletes from by a bucket policy.

      #Expire objects after the lifecycle period
      LifecycleConfiguration:
        Rules:
          -
            Id: Expire
            Status: Enabled
            ExpirationInDays: 10

          -
            Id: AutoRemove
            Status: Enabled
            NoncurrentVersionExpirationInDays: 10

          -
            Id: CleanupIncompleteUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2

      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: 's3:ObjectCreated:*'
            Function:
              Fn::Join:
                - ':'
                - - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                  - Fn::ImportValue:
                      Fn::Sub: mxc-${AWS::Region}-${Environment}-s3eventfn

    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    DependsOn: LambdaPermissionForS3Bucket


  #bucket policy
  ExchangeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ExchangeBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # deny direct deletes, updates are allowed
          -
            Sid: "DenyDeletes"
            Action:
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
            Effect: "Deny"
            Resource:
              - Fn::Sub: arn:aws:s3:::${ExchangeBucket}/*
            Principal: "*"

          # TLS only
          -
            Sid: "RequireTLS"
            Action:
              - "s3:*"
            Effect: "Deny"
            Resource:
              - Fn::Sub: arn:aws:s3:::${ExchangeBucket}/*
            Principal: "*"
            Condition:
              Bool:
                aws:SecureTransport: false

          # require KMS for put
          -
            Sid: "DenyIncorrectEncryptionHeader"
            Action:
              - "s3:PutObject"
            Effect: "Deny"
            Resource:
              - Fn::Sub: arn:aws:s3:::${ExchangeBucket}/*
            Principal: "*"
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: aws:kms

          -
            Sid: "DenyNoCMKHeader"
            Action:
              - "s3:PutObject"
            Effect: "Deny"
            Resource:
              - Fn::Sub: arn:aws:s3:::${ExchangeBucket}/*
            Principal: "*"
            Condition:
              'Null':
                s3:x-amz-server-side-encryption-aws-kms-key-id: true
          -
            Sid: "AllowCopyOpPublisher"
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectVersionAcl
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetObjectAcl
              - s3:GetObjectVersionAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersionTagging
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
            Resource:
              Fn::Sub: arn:aws:s3:::${ExchangeBucket}/*
            Principal:
              AWS:
                - Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Fn::ImportValue:
                        Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-accountid
                    - root
          # read permissions are granted by the ACLs. In addition we want the tags to be private.
          # -
          #   Sid: "AllowCopyOpSubscriber"
          #   Effect: Allow
          #   Action:
          #     - s3:GetObject
          #     - s3:GetObjectVersion
          #     - s3:GetObjectAcl
          #     - s3:GetObjectVersionAcl
          #     - s3:GetObjectTagging
          #     - s3:GetObjectVersionTagging
          #   Resource:
          #     Fn::Sub: arn:aws:s3:::${ExchangeBucket}/*
          #   Principal:
          #     AWS:
          #       - Fn::Join:
          #         - ':'
          #         - - 'arn:aws:iam:'
          #           - Fn::ImportValue:
          #               Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-accountid
          #           - root
          -
            Sid: "AllowBasicConsole"
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              Fn::Sub: arn:aws:s3:::${ExchangeBucket}
            Principal:
              AWS:
                - Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Fn::ImportValue:
                        Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-accountid
                    - root
                - Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Fn::ImportValue:
                        Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-accountid
                    - root

  LambdaPermissionForS3Bucket:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Fn::ImportValue:
          Fn::Sub: mxc-${AWS::Region}-${Environment}-s3eventfn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId

  CMK:
    Type: AWS::KMS::Key
    Properties:
      Description: Symetric Key for Encrypting Objects in Media Exchange
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: node-key-policy
        Statement:
          -
            Sid: KeyManagement
            Effect: Allow
            Principal:
              AWS:
                - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          -
            Sid: SubscriberAccess
            Effect: Allow
            Principal:
              AWS:
                - Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Fn::ImportValue:
                        Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-accountid
                    - root

            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'
          -
            Sid: PublisherAccess
            Effect: Allow
            Principal:
              AWS:
                - Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Fn::ImportValue:
                        Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher-${PublisherName}-accountid
                    - root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'


  AutoNotifySubscriberRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Notify Content Published"
      EventPattern:
        source:
          - Fn::Sub: mxc-${AWS::Region}-${Environment}-publisher
        detail-type:
          - Fn::Sub: 'source=s3:ObjectCreated:*,notify=auto,bucket=${ExchangeBucket}'
      State: "ENABLED"
      Targets:
        -
          Id: "SNSEvent"
          InputPath: $.detail
          Arn:
            Fn::ImportValue:
              Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-notificationtopic
        # -
        #   Id: "XAccount"
        #   Arn:
        #     Fn::Join:
        #       - ':'
        #       - - arn:aws:events
        #         - Ref: AWS::Region
        #         - Fn::ImportValue:
        #             Fn::Sub: mxc-${AWS::Region}-${Environment}-subscriber-${SubscriberName}-accountid
        #         - event-bus/default
