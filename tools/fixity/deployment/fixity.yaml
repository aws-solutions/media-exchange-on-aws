AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Cloudformation template for in-place checksum of objects in S3.

Metadata:

  License:
    Description: |
        Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

        Licensed under the Apache License, Version 2.0 (the "License").
        You may not use this file except in compliance with the License.
        You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Deployment Configuration"
        Parameters:
          - Environment
          - ImageName

Parameters:
  Environment:
    Type: String
    Description: Deployment Environment Name
    Default: dev
    AllowedPattern: "[A-Za-z0-9]+"
    ConstraintDescription: Malformed input-Parameter Environment must only contain uppercase and lowercase letters and numbers
    MaxLength: 10
    MinLength: 2

  ImageName:
    Type: String
    Description: Image Name

Outputs:
  FixtyAPIURL:
    Description: "Fixity endpoint URL"
    Value: !Sub "https://${FixityApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/run"
  FixtyDriverFunctionArn:
    Description: "Fixity Driver Function Arn"
    Value: !GetAtt DriverFunction.Arn
  FixtyS3BatchIAMRoleArn:
    Description: "Fixity IAM Role to use with S3 Batch"
    Value: !GetAtt S3BatchRole.Arn
  FlowLogBucketName:
    Description: "Flow log Bucket Name"
    Value: !Ref FlowLogBucket

Globals:
  Function:
    Runtime: python3.8
    MemorySize: 128

    Environment:
      Variables:
        JOB_SIZE_SMALL:
          Ref: HashJobDefinitionSmall
        JOB_SIZE_LARGE:
          Ref: HashJobDefinitionLarge
        JOB_SIZE_THRESHOLD: 10737418240 #10GB
        JOB_QUEUE:
          Ref: JobQueue
        LogLevel: INFO

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: MediaExchange Fixity

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - Ref: RouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId:
        Ref: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the EC2 instances launched into the VPC by Batch
      VpcId:
        Ref: VPC

  SecurityGroupIngress:
   Type: AWS::EC2::SecurityGroupIngress
   Properties:
    GroupId: !Ref SecurityGroup
    IpProtocol: -1
    SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  SubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""

  SubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""

  SubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  SubnetRouteTableAssociationOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: SubnetOne

  SubnetRouteTableAssociationTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: SubnetTwo

  SubnetRouteTableAssociationThree:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: SubnetThree

  FlowLogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          -
            Id: Expire
            Status: Enabled
            Transitions:
              -
                StorageClass: GLACIER
                TransitionInDays: 90

  FlowLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: FlowLogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:

          # TLS only
          -
            Sid: "RequireTLS"
            Action:
              - "s3:*"
            Effect: "Deny"
            Resource:
              - Fn::Sub: arn:aws:s3:::${FlowLogBucket}/*
            Principal: "*"
            Condition:
              Bool:
                aws:SecureTransport: false

          -
            Sid: "AWSLogDeliveryWrite"
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${FlowLogBucket}/flow-logs/AWSLogs/*
            Principal:
              Service: delivery.logs.amazonaws.com
            Condition:
              StringEquals:
                's3:x-amz-acl' : bucket-owner-full-control

          -
            Sid: "AWSLogDeliveryAclCheck"
            Effect: Allow
            Action:
              - s3:GetBucketAcl
            Resource:
              Fn::Sub: arn:aws:s3:::${FlowLogBucket}
            Principal:
              Service: delivery.logs.amazonaws.com

  VPCLogDeliveringToS3:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId:
        Ref: VPC
      ResourceType: VPC
      TrafficType: ALL
      LogDestination:
        Fn::GetAtt: FlowLogBucket.Arn
      LogDestinationType: s3
      MaxAggregationInterval: 60

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      Priority: 1
      JobQueueName:
        Fn::Sub: mxc-${AWS::Region}-${Environment}-fixity-ec2spot
      ComputeEnvironmentOrder:
        -
          Order: 1
          ComputeEnvironment:
            Ref: EC2SPOTComputeEnvironment

  EC2SPOTComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole:
        Fn::GetAtt: BatchServiceRole.Arn

      ComputeResources:
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 1024
        InstanceTypes:
          - c5n
          - m5zn
          - m5n
          - m5dn
          - r5n
          - r5dn
        AllocationStrategy: SPOT_CAPACITY_OPTIMIZED

        Type: SPOT
        BidPercentage: 60
        SpotIamFleetRole:
          Ref: SPOTFleetRole

        Subnets:
          - Ref: SubnetOne
          - Ref: SubnetTwo
          - Ref: SubnetThree

        InstanceRole:
          Ref: IAMInstanceProfile
        SecurityGroupIds:
          - Ref: SecurityGroup

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ECSInstanceRole

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  SPOTFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: spotfleet.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole


  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: batch.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  BatchAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: mxc-${AWS::Region}-${Environment}-fixity-lambda-access-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - batch:ListJobs
              - batch:TagResource
            Resource: '*'
          - Effect: Allow
            Action:
              - batch:SubmitJob
              - batch:DescribeJobs
            Resource:
              - Fn::Sub: arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*
              - Fn::Sub: arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/*
          - Sid: kms
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource: '*'
          - Sid: s3get
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: '*'

  DriverFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to be invoked by s3 batch
      FunctionName:
        Fn::Sub: mxc-${AWS::Region}-${Environment}-fixity
      CodeUri: lambda/driver/
      Handler: app.s3_batch_handler

      Policies:
        - AWSLambdaBasicExecutionRole
        - Ref: BatchAccessPolicy

      Timeout: 30
      ReservedConcurrentExecutions: 256

  FixityApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        DefaultAuthorizer: AWS_IAM
      Cors:
        AllowMethods: "'POST'"
        AllowHeaders: "'X-Forwarded-For'"
        AllowOrigin: "'*'"
        MaxAge: "'1200'"
      StageName:
        Ref: Environment
      EndpointConfiguration:
        Type: REGIONAL
      MethodSettings:
        -
          DataTraceEnabled: True
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: '/*'

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to be invoked by api
      CodeUri: lambda/driver/
      Handler: app.api_handler
      Runtime: python3.8
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /run
            Method: POST
            RestApiId:
              Ref: FixityApi

      Policies:
        - AWSLambdaBasicExecutionRole
        - Ref: BatchAccessPolicy

      Timeout: 10
      ReservedConcurrentExecutions: 1

  HashJobDefinitionSmall:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image:
          Fn::Sub: ${ImageName}

        Vcpus: 1
        Memory: 2048

        Command:
          - Ref::Bucket
          - Ref::Key
          - 2

        JobRoleArn:
          Fn::GetAtt: JobRole.Arn

      RetryStrategy:
        Attempts: 3
        # TODO inspect exit codes for throttles
        #  only retry for 1, and 255


  HashJobDefinitionLarge:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image:
          Fn::Sub: ${ImageName}

        Vcpus: 16
        Memory: 16384

        Command:
          - Ref::Bucket
          - Ref::Key
          - 32

        JobRoleArn:
          Fn::GetAtt: JobRole.Arn

      RetryStrategy:
        Attempts: 3
        # TODO inspect exit codes for throttles
        #  only retry for 1, and 255

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  JobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        -
          PolicyName: KMSAndS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:PutObjectTagging
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                Resource: '*'

              -
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey*
                Resource: '*'

  S3BatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: mxc-${AWS::Region}-${Environment}-fixity-role
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: batchoperations.s3.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: S3BatchRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetObjectAcl
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectTagging
                  - s3:GetObjectVersionTagging
                  - s3:PutObject
                  - lambda:InvokeFunction
                Effect: Allow
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: '*'
