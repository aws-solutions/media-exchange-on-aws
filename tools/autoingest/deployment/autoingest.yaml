AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Cloudformation template for AutoIngest.

Metadata:

  License:
    Description: |
        Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

        Licensed under the Apache License, Version 2.0 (the "License").
        You may not use this file except in compliance with the License.
        You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Deployment Configuration"
        Parameters:
          - Environment
      -
        Label:
          default: "Copy Configuration"
          Parameters:
            - NotificationTopicArn
            - SouceBucket
            - DestinationBucket
            - DestinationPrefix

Parameters:
  Environment:
    Type: String
    Description: Deployment Environment Name
    Default: dev
    AllowedPattern: "[A-Za-z0-9]+"
    ConstraintDescription: Malformed input-Parameter Environment must only contain uppercase and lowercase letters and numbers
    MaxLength: 10
    MinLength: 2

  NotificationTopicArn:
    Type: String
    Description: MediaExchange Notifications topic from SubscriberOnBoradingSummary

  DestinationBucket:
    Type: String
    Description: Destination S3 Bucket Name

  SouceBucket:
    Type: String
    Description: Destination S3 Bucket Name

  DestinationPrefix:
    Type: String
    Description: Destination S3 Bucket Name
    Default: ingest

Resources:

  CMK:
    Type: AWS::KMS::Key
    Properties:
      Description: Symetric Key for Encrypting Messages in Q
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Id: node-key-policy
        Statement:
          -
            Sid: KeyManagement
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'

          -
            Sid: "Allow access for Key User (SNS Service Principal)"
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: '*'

          -
            Sid: "Allow access for Key User (Lambda Function)"
            Effect: Allow
            Principal:
              AWS:
               Fn::GetAtt: DriverFunctionRole.Arn
            Action:
             - kms:Decrypt
            Resource: '*'

  NQ:
    Type: 'AWS::SQS::Queue'
    Properties:
      KmsMasterKeyId:
        Ref: CMK
      KmsDataKeyReusePeriodSeconds:  86400
      MessageRetentionPeriod: 86400
      VisibilityTimeout: 900

  DLQ:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600

  DriverFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to be triggered by SNS notification
      CodeUri: lambda/driver/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128

      Events:
        MXCEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: NotificationTopicArn
            SqsSubscription:
              QueuePolicyLogicalId: NQQPolicy
              QueueArn:
                Fn::GetAtt: NQ.Arn
              QueueUrl:
                Ref: NQ
              BatchSize: 1

      DeadLetterQueue:
        TargetArn:
          Fn::GetAtt: DLQ.Arn
        Type: SQS

      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName:
              Ref: SouceBucket
        - S3WritePolicy:
            BucketName:
              Ref: DestinationBucket
        - Statement:
          - Sid: kms
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'

      Timeout: 900

      Environment:
        Variables:
          SOURCE_BUCKET_NAME:
            Ref: SouceBucket
          DESTINATION_BUCKET_NAME:
            Ref: DestinationBucket
          DESTINATION_PREFIX:
            Ref: DestinationPrefix
          LogLevel: INFO
